#!/usr/local/bin/perl -w
#
# This program will take a list of files and print out various
#   information about them (type, size, last accessed) as
#   well as a total size of all files.
# This was concieved to check for core files that can be
#   removed.  The input file will be generated by find. Future
#   versions will be completely independent.
#
# Version History (Update Version & Modified variable also)
#   0.1   Initial dev version
#         Basic functionality
#   0.5   Added function to remove older core files (-r option)
#   1.0   Tested ok, time for release version
#
# Start Date: Dec 11, 2002
# Coder: awmyhr
# e-mail to: awmyhr@gmail.com

use strict;				#Turn on strict, good programing
use Getopt::Std;			#Parser for command line options
use File::stat;				#Get file stats (size, a/mtime, U/GID)
use File::Basename;			#Get name of program

use vars qw($opt_h $opt_v $opt_i $opt_o $opt_r);
					#Variables: Command line options used by Getopt
my(
	$Version,			#Const: Verison
	$Modified,			#Const: Date last modified
	$Dev,				#Const: Development version?
	$ProgName,			#Const: Program Name
	$InFile,			#Const: File containing list to check
	@FileList,			#Const: List of files to check
	@ReportList,			#Var: List of files checked
	@RemoveList,			#Var: List of files removed
	$File,				#Var: Current file to check
	$OutFile,			#Const: File to output to
	$Type,				#Var: Holds type of current file
	$Stats,				#Var: Holds stats object for current file
	$TotalSize,			#Var: Total size of reported files
	$RemoveSize,			#Var: Total size of removed files
	$Day,				#Const: Hold the number of seconds in one day
);

#Defaults
$Version	= 1.0;
$ProgName	= basename("$0");
$Modified	= "Dec 13, 2002";
$Dev		= 0;
$InFile		= "coreCheck.lst";
$OutFile	= "coreReport.txt";
$TotalSize	= 0;
$RemoveSize	= 0;
$Day		= 60 * 60 * 24;
						
if( ($Version * 10) % 2 ) {		#Check for Development version
	print "WARNING: This is a develpment version!\n";
	$Dev=1;
}

if(!getopts('rhvi:o:')) {		#Check options and warn if errors
	print "Usage: $ProgName\n";
	print "Try ' -h' for more information.\n";
	exit 1;				#Exit if incorrect options
}

if($opt_h){				#Display help if asked for
	print <<END_of_text;
	Usage:	$ProgName
	-i file		Input file (Default is $InFile)
	-o file		Output file (Default is $OutFile)
	-r		Remove files older than 1 week
        -h		Display this help and exit
	-v		Output version infromaiton and exit

Report bugs to awmyhr\@gmail.com
END_of_text
	exit 0;
}

if($opt_v){				#Display Version information
	print <<END_of_text;
$Version  
By: awmyhr
Date Created: Dec 11, 2002  Last Modified: $Modified
END_of_text
	exit 0;
}

if($opt_i){ $InFile = $opt_i; }		#Set input file, this will change in future version
if($opt_o){ $OutFile = $opt_o; }	#Set output file, this will change in future version
					#We don't want to automatically remove a former report
(-e $OutFile) and die "Please remove $OutFile before executeing.\n";

open(INFILE, $InFile) or die "Cann't open $InFile: $!\n";
	@FileList = readline (*INFILE);	#Get file list to work with
close(INFILE);

foreach $File (@FileList) {		#This is where the actual work is done
	chomp($File);
	$Type = `file $File`;		#Check file type
	next if($Type !~ /core file/);	#Only want core files
					
					#Next we get the file attributes
	$Stats = stat("$File") or die "Cann't stat $File: $!\n";
	push @ReportList, "$File, " . $Stats->size . ", " . $Stats->atime . ", " . $Stats->mtime . "\n";
	$TotalSize += $Stats->size;
	
}

print "Found " . $TotalSize/1024/1024 . "mb in " . scalar(@ReportList) . " files.\n";

if($opt_r) {				#Remove files older than one week if asked
	my( $Fname, $Fsize, $Fatime, $Fmtime, $oneweek);
	$oneweek = time - ( $Day * 7 );
	
	foreach $File (@ReportList) {
		( $Fname, $Fsize, $Fatime, $Fmtime ) = split(/,/, $File);
		chomp($Fmtime);
		next if(($Fatime > $oneweek) || ($Fmtime > $oneweek));
		
		if($Dev) {
			print "Would remove: $Fname dated:" . localtime($Fmtime) . "\n";
			push @RemoveList, "$Fname\n";
			$RemoveSize += $Fsize;
		} else {
			if(unlink $Fname) {
				push @RemoveList, "$Fname\n";
				$RemoveSize += $Fsize;
			} else {
				push @RemoveList, "Could not remove $File: $!";
			}
		}
	}
}

print "Removed ". $RemoveSize/1024/1024 . "mb in " . scalar(@RemoveList) . " files.\n";
	
open(OUTFILE, ">$OutFile") or die "Cann't open $OutFile: $!\n";
	print OUTFILE @ReportList;	#For now we just dump the list to a file
	if(scalar(@RemoveList)) { 
		print OUTFILE "\n\nRemove list:\n";
		print OUTFILE @RemoveList;
	}
close(OUTFILE);
chmod 0666, $OutFile;			#So anyone can remove the report

exit 0;

# FUTURE IDEAS
# add array @ErrorList and track errors there
# user configurable date (-d # - where # = number of days old)
# decide what should actually be in the report file
# recycle report file instead of exiting
# find  core files automatically
