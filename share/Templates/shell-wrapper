#!/bin/sh
#-- NOTE: Default to POSIX shell/mode. A wrapper script should *not* need more...
#==============================================================================
#:"""
#: .. program:: {{ script_name|default("TODO: CHANGEME", true) }}
#:    :synopsis: {{ script_synopsis|default("TODO: CHANGEME", true) }}
#:
#:    :copyright: {{ software_copyright|default("TODO: CHANGEME", true) }}
#:    :license: {{ software_license|default("TODO: CHANGEME", true) }}
#:
#: .. codeauthor:: {{ full_name|default("TODO: CHANGEME", true) }} <{{ email|default("TODO: CHANGEME", true) }}>
#:
#: {{ script_description|default("TODO: CHANGEME", true) }}
#:"""
#==============================================================================
#-- Variables which are meta for the script should be dunders (__varname__)
#-- TODO: UPDATE meta vars
__version__='{{ version|default("TODO: CHANGEME", true) }}' #: current version
__revised__='{{ date|default("TODO: CHANGEME", true) }}' #: date of most recent revision
__contact__='{{ contact_name|default("TODO: CHANGEME", true) }} <{{ contact_email|default("TODO: CHANGEME", true) }}>' #: primary contact for support/?'s
__synopsis__='{{ script_synopsis|default("TODO: CHANGEME", true) }}'
__description__="
{{ script_description|default('TODO: CHANGEME', true) }}
"
#------------------------------------------------------------------------------
#-- The following few variables should be relatively static over life of script
__author__='{{ full_name|default("TODO: CHANGEME", true) }} <{{ email|default("TODO: CHANGEME", true) }}>' #: coder(s) of script
__created__='{{ date|default("TODO: CHANGEME", true) }}'               #: date script originlly created
__copyright__='{{ software_copyright|default("TODO: CHANGEME", true) }}' #: Copyright short name
__license__='{{ software_license|default("TODO: CHANGEME", true) }}'
__cononical_name__='{{ script_name|default("TODO: CHANGEME", true) }}' #: static name, *NOT* os.path.basename(sys.argv[0])
__project_name__='{{ project_name|default("TODO: CHANGEME", true) }}'  #: name of overall project, if needed
__project_home__='{{ project_home|default("TODO: CHANGEME", true) }}'  #: where to find source/documentation
__template_version__='1.3.4'             #: version of template file used
#-- We are not using this variable for now.
# shellcheck disable=2034
__docformat__='reStructuredText en'      #: attempted style for documentation
__basename__="${0}" #: name script run as
#==============================================================================
#-- Set needed varaibles.
alias command_wrapped=''
command=$(/usr/bin/basename "${__basename__}")
#==============================================================================
#-- if wrapper is called directly, print about info
if [ "${command}" = "${__cononical_name__}" ]; then
    printf 'About this wrapper (%s)\n' "${__basename__}"
    printf '%s\n' "${__synopsis__}"
    printf '%s\n\n' "${__description__}"
    printf 'Created: %s  Contact: %s\n' "${__created__}" "${__contact__}"
    printf 'Revised: %s  Version: %s\n' "${__revised__}" "${__version__}"
    printf '%s, part of %s.\n' "${__cononical_name__}" "${__project_name__}" 
    printf 'Project home: %s\n' "${__project_home__}"
    printf '(c) Copyright %s (License: %s)\n' "${__copyright__}" "${__license__}"
    printf 'By %s; based on template version %s.\n' "${__author__}" "${__template_version__}"
    exit 0
fi
#==============================================================================
#-- Requote things that were (likely) quoted.
#-- originally from http://stackoverflow.com/questions/1668649/how-to-keep-quotes-in-args
for x in "${@}" ; do
  if [ "${x}" != "${x%[[:space:]]*}" ]; then
    #-- Not gonna to stress this as it would need more testing then I have time for
    # shellcheck disable=2089
    x="\"${x}\""
  fi
  params=${params}" "${x}
done
#==============================================================================
#-- TODO: Do something more interesting here...
#-- We want to pass params exactly as they are defined
# shellcheck disable=2090,2086
command_wrapped ${params}
COMMAND_RETURN="${?}"
#==============================================================================
#-- provide wraper info when version/help are called.
if [ "${1}" = '--version' ]; then
    printf '%s (%s) %s\n' "${__cononical_name__}" "${__project_name__}" "${__version__}"
elif [ "${1}" = '--help' ]; then
    printf '%s wrapped by %s\n' "${command}" "${__cononical_name__}"
fi

exit "${COMMAND_RETURN}"
